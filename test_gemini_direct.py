#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Test Gemini tr·ª±c ti·∫øp v·ªõi n·ªôi dung ng·∫Øn"""
import asyncio
import os
from crawl4ai import AsyncWebCrawler, LLMConfig
from crawl4ai.extraction_strategy import LLMExtractionStrategy
import sys

if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

async def test_gemini_direct():
    """Test Gemini v·ªõi n·ªôi dung tr·ª±c ti·∫øp"""
    
    # Set API key
    os.environ["GEMINI_API_KEY"] = "AIzaSyAinQHM649wj9BfQB3yp5-Q82Y4pssKXVU"
    
    # N·ªôi dung m·∫´u t·ª´ vƒÉn b·∫£n th·ª±c
    sample_content = """
    ƒêi·ªÅu 5. Ti·ªÅn l∆∞∆°ng d·∫°y th√™m gi·ªù
    
    1. Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y c·ªßa nh√† gi√°o ƒë∆∞·ª£c x√°c ƒë·ªãnh nh∆∞ sau:
    
    Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y = (T·ªïng ti·ªÅn l∆∞∆°ng c·ªßa 12 th√°ng trong nƒÉm h·ªçc √ó S·ªë tu·∫ßn gi·∫£ng d·∫°y) / (ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc √ó 52 tu·∫ßn)
    
    2. Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y th√™m = Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y √ó 150%.
    
    3. Ti·ªÅn l∆∞∆°ng d·∫°y th√™m gi·ªù/nƒÉm h·ªçc = S·ªë ti·∫øt d·∫°y th√™m/nƒÉm h·ªçc √ó Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y th√™m.
    
    ƒêi·ªÅu 3. Quy ƒë·ªãnh chung
    
    3. T·ªïng s·ªë ti·∫øt d·∫°y th√™m trong m·ªôt nƒÉm h·ªçc c·ªßa m·ªói nh√† gi√°o
    a) T·ªïng s·ªë ti·∫øt d·∫°y th√™m trong m·ªôt nƒÉm h·ªçc c·ªßa m·ªói nh√† gi√°o ƒë∆∞·ª£c t√≠nh ƒë·ªÉ tr·∫£ ti·ªÅn l∆∞∆°ng d·∫°y th√™m gi·ªù kh√¥ng qu√° 200 ti·∫øt.
    
    ƒêi·ªÅu 4. T·ªïng s·ªë ti·∫øt d·∫°y th√™m
    T·ªïng s·ªë ti·∫øt d·∫°y th√™m t·ªëi ƒëa = [T·ªïng s·ªë ti·∫øt d·∫°y + T·ªïng s·ªë ti·∫øt nhi·ªám v·ª• kh√°c + T·ªïng s·ªë ti·∫øt d·∫°y ƒë·ªß] - (T·ªïng ƒë·ªãnh m·ª©c ti·∫øt d·∫°y c·ªßa t·∫•t c·∫£ nh√† gi√°o/nƒÉm h·ªçc).
    """
    
    prompt = """
    Tr√≠ch xu·∫•t T·∫§T C·∫¢ c√¥ng th·ª©c t√≠nh to√°n t·ª´ vƒÉn b·∫£n v·ªÅ l∆∞∆°ng gi√°o vi√™n.
    
    Tr·∫£ v·ªÅ JSON:
    {
      "formulas": [
        {
          "name": "t√™n c√¥ng th·ª©c",
          "formula": "c√¥ng th·ª©c ƒë·∫ßy ƒë·ªß", 
          "type": "lo·∫°i"
        }
      ],
      "total_formulas": s·ªë_l∆∞·ª£ng
    }
    """
    
    async with AsyncWebCrawler(verbose=True) as crawler:
        llm_config = LLMConfig(
            provider="gemini/gemini-2.0-flash-exp",
            api_token=os.getenv("GEMINI_API_KEY")
        )
        
        extraction_strategy = LLMExtractionStrategy(
            llm_config=llm_config,
            extraction_type="json",
            instruction=prompt
        )
        
        try:
            # Test v·ªõi n·ªôi dung tr·ª±c ti·∫øp
            result = await crawler.arun(
                url="data:text/html,<html><body>" + sample_content.replace('\n', '<br>') + "</body></html>",
                extraction_strategy=extraction_strategy,
                bypass_cache=True
            )
            
            if result.success:
                print("‚úÖ Gemini Direct Test SUCCESS!")
                
                extracted_data = result.extracted_content
                print(f"Response: {extracted_data}")
                
                if extracted_data:
                    import json
                    try:
                        if isinstance(extracted_data, str):
                            data = json.loads(extracted_data)
                        else:
                            data = extracted_data
                        
                        formulas = data.get("formulas", [])
                        print(f"\nüéØ Found {len(formulas)} formulas:")
                        
                        for i, formula in enumerate(formulas, 1):
                            print(f"{i}. {formula.get('name', 'N/A')}")
                            print(f"   {formula.get('formula', 'N/A')}")
                        
                    except Exception as e:
                        print(f"Parse error: {e}")
                        print("Raw:", str(extracted_data)[:500])
                else:
                    print("‚ùå No extraction")
                    
            else:
                print(f"‚ùå Failed: {result.error_message}")
                
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    asyncio.run(test_gemini_direct())