#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Test Enhanced Patterns v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø"""
import json
import sys
import os
from pathlib import Path
from scripts.extract.super_enhanced_formula_extractor import SuperEnhancedFormulaExtractor

if sys.platform == 'win32':
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    sys.stdout.reconfigure(encoding='utf-8')

def test_with_real_content():
    """Test v·ªõi n·ªôi dung th·ª±c t·∫ø t·ª´ file JSON"""
    
    # Sample content from Vietnamese legal document about teacher salary
    real_content = """
    ƒêi·ªÅu 3. C√°ch t√≠nh ti·ªÅn l∆∞∆°ng d·∫°y th√™m gi·ªù
    
    1. Ti·ªÅn l∆∞∆°ng c·ªßa m·ªôt th√°ng l√†m cƒÉn c·ª© t√≠nh tr·∫£ ti·ªÅn l∆∞∆°ng d·∫°y th√™m gi·ªù c·ªßa nh√† gi√°o bao g·ªìm: ti·ªÅn l∆∞∆°ng t√≠nh theo h·ªá s·ªë l∆∞∆°ng (bao g·ªìm ph·ª• c·∫•p th√¢m ni√™n v∆∞·ª£t khung n·∫øu c√≥) v√† c√°c kho·∫£n ph·ª• c·∫•p ch·ª©c v·ª•, ph·ª• c·∫•p tr√°ch nhi·ªám (n·∫øu c√≥).
    
    2. Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y th√™m gi·ªù ƒë∆∞·ª£c t√≠nh nh∆∞ sau:
    
    a) ƒê·ªëi v·ªõi nh√† gi√°o trong c∆° s·ªü gi√°o d·ª•c m·∫ßm non, ph·ªï th√¥ng, th∆∞·ªùng xuy√™n, trung t√¢m gi√°o d·ª•c ngh·ªÅ nghi·ªáp - gi√°o d·ª•c th∆∞·ªùng xuy√™n:
    
    Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y = (T·ªïng ti·ªÅn l∆∞∆°ng c·ªßa 12 th√°ng trong nƒÉm h·ªçc √ó S·ªë tu·∫ßn gi·∫£ng d·∫°y ho·∫∑c d·∫°y tr·∫ª) / (ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc √ó 52 tu·∫ßn)
    
    b) ƒê·ªëi v·ªõi nh√† gi√°o trong c∆° s·ªü gi√°o d·ª•c ƒë·∫°i h·ªçc, cao ƒë·∫≥ng s∆∞ ph·∫°m:
    
    Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y = (T·ªïng ti·ªÅn l∆∞∆°ng c·ªßa 12 th√°ng trong nƒÉm h·ªçc √ó ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc t√≠nh theo gi·ªù h√†nh ch√≠nh √ó 44 tu·∫ßn) / (ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc √ó 1760 gi·ªù √ó 52 tu·∫ßn)
    
    3. ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc:
    
    a) ƒê·ªãnh m·ª©c gi·ªù d·∫°y/nƒÉm h·ªçc ƒë·ªëi v·ªõi gi√°o vi√™n m·∫ßm non; ƒë·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc ƒë·ªëi v·ªõi gi√°o vi√™n ph·ªï th√¥ng: 200 ti·∫øt
    
    b) ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc c·ªßa gi√°o vi√™n m·∫ßm non = (S·ªë gi·ªù d·∫°y ƒë·ªãnh m·ª©c/ng√†y) √ó (S·ªë ng√†y l√†m vi·ªác/tu·∫ßn) √ó (S·ªë tu·∫ßn d·∫°y tr·∫ª/nƒÉm h·ªçc)
    
    4. M·ª©c l∆∞∆°ng c∆° b·∫£n hi·ªán h√†nh: 1.800.000 ƒë·ªìng/th√°ng
    
    5. T·ª∑ l·ªá ƒë√≥ng b·∫£o hi·ªÉm x√£ h·ªôi: 8%
    
    6. T·ª∑ l·ªá ƒë√≥ng b·∫£o hi·ªÉm y t·∫ø: 1.5%
    
    7. Ph·ª• c·∫•p tr√°ch nhi·ªám = 25% √ó m·ª©c l∆∞∆°ng c∆° b·∫£n
    
    8. Gi·∫£m tr·ª´ gia c·∫£nh: 11.000.000 ƒë·ªìng/th√°ng
    
    9. Thu·∫ø su·∫•t thu·∫ø thu nh·∫≠p c√° nh√¢n: 10%
    
    10. L·ªá ph√≠ ƒëƒÉng k√Ω h·ªì s∆°: 500.000 ƒë·ªìng
    
    11. M·ª©c ph·∫°t vi ph·∫°m h√†nh ch√≠nh: t·ª´ 1.000.000 ƒë·∫øn 5.000.000 ƒë·ªìng
    
    12. H·ªá s·ªë l∆∞∆°ng K = 2.34
    
    13. T·ªïng s·ªë ti·∫øt d·∫°y th√™m trong m·ªôt nƒÉm h·ªçc kh√¥ng qu√° 200 ti·∫øt
    
    14. L√£i su·∫•t cho vay ∆∞u ƒë√£i: 6.5%/nƒÉm
    
    15. T·ª∑ gi√° USD: 24.500 ƒë·ªìng
    
    16. Ch·ªâ s·ªë gi√° ti√™u d√πng tƒÉng: 3.2%
    """
    
    print("üß™ TESTING SUPER ENHANCED FORMULA EXTRACTOR")
    print("=" * 60)
    print(f"üìÑ Content length: {len(real_content)} characters")
    
    extractor = SuperEnhancedFormulaExtractor()
    formulas = extractor.extract_formulas_from_text(real_content)
    
    print(f"\nüîç EXTRACTION RESULTS:")
    print(f"üìä Total formulas found: {len(formulas)}")
    
    if formulas:
        print(f"\nüìã DETAILED RESULTS:")
        for i, formula in enumerate(formulas, 1):
            print(f"\n{i:2d}. [{formula['confidence']:.3f}] {formula['name']}")
            print(f"    üìù Formula: {formula['formula']}")
            print(f"    üè∑Ô∏è  Type: {formula['type']}")
            print(f"    üîß Method: {formula['extraction_method']}")
            if formula.get('groups'):
                print(f"    üì¶ Groups: {formula['groups']}")
            print(f"    üìç Context: {formula['context'][:100]}...")
    
    # Analyze by type
    type_counts = {}
    confidence_stats = []
    
    for formula in formulas:
        formula_type = formula.get("type", "unknown")
        type_counts[formula_type] = type_counts.get(formula_type, 0) + 1
        confidence_stats.append(formula.get("confidence", 0))
    
    if type_counts:
        print(f"\nüìä FORMULA TYPES ANALYSIS:")
        for formula_type, count in sorted(type_counts.items(), key=lambda x: x[1], reverse=True):
            print(f"   {formula_type}: {count} formulas")
    
    if confidence_stats:
        avg_confidence = sum(confidence_stats) / len(confidence_stats)
        high_conf = len([c for c in confidence_stats if c > 0.9])
        med_conf = len([c for c in confidence_stats if 0.7 <= c <= 0.9])
        low_conf = len([c for c in confidence_stats if c < 0.7])
        
        print(f"\nüìà CONFIDENCE STATISTICS:")
        print(f"   Average confidence: {avg_confidence:.3f}")
        print(f"   High confidence (>0.9): {high_conf}")
        print(f"   Medium confidence (0.7-0.9): {med_conf}")
        print(f"   Low confidence (<0.7): {low_conf}")
    
    # Save results to file
    output_file = Path("data/enhanced_patterns_test_result.json")
    result_data = {
        "test_content_length": len(real_content),
        "total_formulas": len(formulas),
        "formulas": formulas,
        "type_counts": type_counts,
        "confidence_stats": {
            "average": avg_confidence if confidence_stats else 0,
            "high_confidence_count": high_conf if confidence_stats else 0,
            "medium_confidence_count": med_conf if confidence_stats else 0,
            "low_confidence_count": low_conf if confidence_stats else 0
        },
        "extraction_method": "super_enhanced_25_patterns_test"
    }
    
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(result_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Results saved to: {output_file}")
    print(f"\n{'='*60}")
    print(f"üéØ TEST COMPLETE - Found {len(formulas)} formulas with avg confidence {avg_confidence:.3f}")
    
    return len(formulas) > 0

if __name__ == "__main__":
    success = test_with_real_content()
    print(f"\nüèÜ Test {'PASSED' if success else 'FAILED'}")