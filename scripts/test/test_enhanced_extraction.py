#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Test Enhanced Formula Extraction v·ªõi d·ªØ li·ªáu th·ª±c"""
import json
import asyncio
from pathlib import Path
from scripts.extract.enhanced_formula_extractor import EnhancedFormulaExtractor
from smart_formula_patterns import SmartFormulaPatterns
import sys

if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

async def test_with_real_data():
    """Test v·ªõi d·ªØ li·ªáu th·ª±c t·ª´ file"""
    
    # Test data - m·ªôt s·ªë URL c√≥ kh·∫£ nƒÉng ch·ª©a c√¥ng th·ª©c
    test_links = [
        {
            "Stt": 1,
            "T√™n vƒÉn b·∫£n": "Th√¥ng t∆∞ 30/2016/TT-BTC h∆∞·ªõng d·∫´n thu·∫ø thu nh·∫≠p c√° nh√¢n",
            "Url": "https://thuvienphapluat.vn/van-ban/Thue-Phi-Le-Phi/Thong-tu-30-2016-TT-BTC-huong-dan-thuc-hien-mot-so-dieu-cua-Luat-Thue-thu-nhap-ca-nhan-309144.aspx"
        },
        {
            "Stt": 2,
            "T√™n vƒÉn b·∫£n": "Ngh·ªã ƒë·ªãnh 38/2019/Nƒê-CP v·ªÅ b·∫£o hi·ªÉm x√£ h·ªôi",
            "Url": "https://thuvienphapluat.vn/van-ban/Bao-hiem/Nghi-dinh-38-2019-ND-CP-quy-dinh-ve-bao-hiem-xa-hoi-415578.aspx"
        }
    ]
    
    print("üß™ TESTING ENHANCED FORMULA EXTRACTION")
    print("=" * 60)
    
    # Test 1: Smart Patterns v·ªõi text m·∫´u
    print("\n1Ô∏è‚É£ Testing Smart Patterns with sample text:")
    patterns = SmartFormulaPatterns()
    
    sample_texts = [
        """
        M·ª©c l∆∞∆°ng c∆° b·∫£n √°p d·ª•ng chung = 1.800.000 ƒë·ªìng/th√°ng.
        T·ª∑ l·ªá thu·∫ø thu nh·∫≠p c√° nh√¢n: 10% ƒë·ªëi v·ªõi thu nh·∫≠p t·ª´ 5 tri·ªáu ƒë·∫øn 10 tri·ªáu ƒë·ªìng.
        Ph·ª• c·∫•p tr√°ch nhi·ªám ƒë∆∞·ª£c t√≠nh b·∫±ng 20% √ó l∆∞∆°ng c∆° b·∫£n.
        Thu·∫ø thu nh·∫≠p = thu nh·∫≠p ch·ªãu thu·∫ø √ó t·ª∑ l·ªá thu·∫ø.
        Ti·ªÅn ph·∫°t vi ph·∫°m h√†nh ch√≠nh t·ª´ 500.000 ƒë·∫øn 2.000.000 ƒë·ªìng.
        """,
        """
        M·ª©c tr·ª£ c·∫•p x√£ h·ªôi kh√¥ng qu√° 1.560.000 ƒë·ªìng/th√°ng.
        L∆∞∆°ng h∆∞u = l∆∞∆°ng c∆° b·∫£n √ó t·ª∑ l·ªá h∆∞u √ó h·ªá s·ªë ƒëi·ªÅu ch·ªânh.
        B·∫£o hi·ªÉm y t·∫ø = 4.5% √ó m·ª©c l∆∞∆°ng ƒë√≥ng b·∫£o hi·ªÉm.
        Ph√≠ d·ªãch v·ª• c√¥ng ƒë∆∞·ª£c t√≠nh theo c√¥ng th·ª©c: Ph√≠ = gi√° tr·ªã d·ªãch v·ª• √ó 0.5%.
        """
    ]
    
    for i, text in enumerate(sample_texts, 1):
        print(f"\nüìù Sample {i}:")
        results = patterns.extract_with_patterns(text)
        
        if results:
            print(f"   ‚úÖ Found {len(results)} formulas:")
            for j, result in enumerate(results[:3], 1):  # Show top 3
                print(f"   {j}. [{result['confidence']:.2f}] {result['name']}")
                print(f"      Formula: {result['formula']}")
                print(f"      Type: {result['type']}")
        else:
            print("   ‚ùå No formulas found")
    
    # Test 2: Enhanced Extractor v·ªõi URL th·ª±c
    print(f"\n2Ô∏è‚É£ Testing Enhanced Extractor with real URLs:")
    
    from playwright.async_api import async_playwright
    
    extractor = EnhancedFormulaExtractor()
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        
        # Load cookies if available
        context_options = {}
        cookies_path = Path("data/cookies.json")
        if cookies_path.exists():
            context_options["storage_state"] = str(cookies_path)
            print("   üç™ Using saved cookies")
        
        context = await browser.new_context(**context_options)
        
        for item in test_links:
            url = item["Url"]
            title = item["T√™n vƒÉn b·∫£n"]
            
            print(f"\nüìÑ Testing: {title}")
            print(f"   URL: {url}")
            
            page = await context.new_page()
            try:
                await page.goto(url, wait_until="domcontentloaded", timeout=30000)
                await page.wait_for_timeout(3000)
                
                result = await extractor.extract_from_page(page, url)
                
                formulas_count = result.get("total_formulas", 0)
                if formulas_count > 0:
                    print(f"   ‚úÖ Found {formulas_count} formulas:")
                    
                    # Show details
                    for i, formula in enumerate(result["formulas"][:3], 1):
                        print(f"   {i}. [{formula.get('confidence', 0):.2f}] {formula['name']}")
                        print(f"      Formula: {formula['formula'][:100]}...")
                        print(f"      Type: {formula.get('type', 'unknown')}")
                        if formula.get('context'):
                            print(f"      Context: {formula['context'][:80]}...")
                else:
                    print(f"   ‚ùå No formulas found")
                    if result.get('error'):
                        print(f"   Error: {result['error']}")
                
            except Exception as e:
                print(f"   ‚ùå Error: {e}")
            finally:
                await page.close()
        
        await browser.close()
    
    print(f"\n{'='*60}")
    print("üéØ Test completed!")

def test_patterns_only():
    """Test ch·ªâ patterns m√† kh√¥ng c·∫ßn browser"""
    print("üß™ TESTING SMART PATTERNS ONLY")
    print("=" * 50)
    
    patterns = SmartFormulaPatterns()
    
    # Test v·ªõi c√°c v√≠ d·ª• th·ª±c t·∫ø t·ª´ vƒÉn b·∫£n ph√°p lu·∫≠t
    real_examples = [
        # T·ª´ Th√¥ng t∆∞ thu·∫ø
        """
        M·ª©c gi·∫£m tr·ª´ gia c·∫£nh cho ng∆∞·ªùi n·ªôp thu·∫ø l√† 11.000.000 ƒë·ªìng/th√°ng.
        M·ª©c gi·∫£m tr·ª´ gia c·∫£nh cho m·ªói ng∆∞·ªùi ph·ª• thu·ªôc l√† 4.400.000 ƒë·ªìng/th√°ng.
        Thu·∫ø thu nh·∫≠p c√° nh√¢n ph·∫£i n·ªôp = Thu nh·∫≠p t√≠nh thu·∫ø √ó Thu·∫ø su·∫•t.
        """,
        
        # T·ª´ Ngh·ªã ƒë·ªãnh b·∫£o hi·ªÉm
        """
        M·ª©c ƒë√≥ng b·∫£o hi·ªÉm x√£ h·ªôi b·∫±ng 8% m·ª©c l∆∞∆°ng ƒë√≥ng b·∫£o hi·ªÉm x√£ h·ªôi.
        M·ª©c ƒë√≥ng b·∫£o hi·ªÉm y t·∫ø b·∫±ng 1,5% m·ª©c l∆∞∆°ng ƒë√≥ng b·∫£o hi·ªÉm y t·∫ø.
        M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu v√πng I l√† 4.680.000 ƒë·ªìng/th√°ng.
        """,
        
        # T·ª´ Ngh·ªã ƒë·ªãnh l∆∞∆°ng
        """
        L∆∞∆°ng c∆° s·ªü √°p d·ª•ng chung l√† 1.800.000 ƒë·ªìng/th√°ng.
        Ph·ª• c·∫•p tr√°ch nhi·ªám = H·ªá s·ªë ph·ª• c·∫•p √ó L∆∞∆°ng c∆° s·ªü.
        Ph·ª• c·∫•p th√¢m ni√™n ngh·ªÅ = T·ª∑ l·ªá ph·ª• c·∫•p √ó L∆∞∆°ng c∆° s·ªü √ó S·ªë nƒÉm c√¥ng t√°c.
        """,
        
        # T·ª´ Th√¥ng t∆∞ ph√≠ l·ªá ph√≠
        """
        L·ªá ph√≠ c·∫•p gi·∫•y ph√©p l√°i xe h·∫°ng A1: 135.000 ƒë·ªìng.
        L·ªá ph√≠ c·∫•p gi·∫•y ph√©p l√°i xe h·∫°ng B1: 270.000 ƒë·ªìng.
        Ph√≠ s√°t h·∫°ch l√°i xe = Ph√≠ c∆° b·∫£n + Ph√≠ s√°t h·∫°ch th·ª±c h√†nh.
        """,
        
        # T·ª´ Ngh·ªã ƒë·ªãnh x·ª≠ ph·∫°t
        """
        M·ª©c ph·∫°t ti·ªÅn t·ª´ 800.000 ƒë·ªìng ƒë·∫øn 1.200.000 ƒë·ªìng.
        Ti·ªÅn ph·∫°t kh√¥ng qu√° 3 l·∫ßn m·ª©c l∆∞∆°ng c∆° s·ªü.
        Ph·∫°t b·ªï sung = 10% √ó Gi√° tr·ªã h√†ng h√≥a vi ph·∫°m.
        """
    ]
    
    total_found = 0
    
    for i, example in enumerate(real_examples, 1):
        print(f"\nüìù Example {i}:")
        print(f"Text: {example.strip()[:100]}...")
        
        results = patterns.extract_with_patterns(example)
        
        if results:
            print(f"   ‚úÖ Found {len(results)} formulas:")
            total_found += len(results)
            
            for j, result in enumerate(results, 1):
                print(f"   {j}. [{result['confidence']:.2f}] {result['name']}")
                print(f"      Formula: {result['formula']}")
                print(f"      Type: {result['type']}")
                if result.get('components'):
                    print(f"      Components: {result['components']}")
        else:
            print("   ‚ùå No formulas found")
    
    print(f"\n{'='*50}")
    print(f"üéØ SUMMARY: Found {total_found} formulas total")
    print(f"üìä Average: {total_found/len(real_examples):.1f} formulas per example")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Test Enhanced Formula Extraction")
    parser.add_argument("--patterns-only", action="store_true", 
                       help="Test only patterns without browser")
    
    args = parser.parse_args()
    
    if args.patterns_only:
        test_patterns_only()
    else:
        asyncio.run(test_with_real_data())