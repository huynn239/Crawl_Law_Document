#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Test Improved Patterns - Ki·ªÉm tra 4 patterns m·ªõi"""
import re
import sys
import os
from enhanced_regex_patterns import EnhancedRegexPatterns

if sys.platform == 'win32':
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    sys.stdout.reconfigure(encoding='utf-8')

def test_improved_patterns():
    """Test v·ªõi n·ªôi dung th·ª±c t·ª´ Th√¥ng t∆∞ 21/2025"""
    
    # N·ªôi dung c√≥ c√°c c√¥ng th·ª©c multi-line v√† ph·ª©c t·∫°p
    test_content = """
    ƒêi·ªÅu 3. C√°ch t√≠nh ti·ªÅn l∆∞∆°ng d·∫°y th√™m gi·ªù
    
    2. Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y th√™m gi·ªù ƒë∆∞·ª£c t√≠nh nh∆∞ sau:
    
    a) ƒê·ªëi v·ªõi nh√† gi√°o trong c∆° s·ªü gi√°o d·ª•c m·∫ßm non, ph·ªï th√¥ng, th∆∞·ªùng xuy√™n:
    
    Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y = 
    (T·ªïng ti·ªÅn l∆∞∆°ng c·ªßa 12 th√°ng trong nƒÉm h·ªçc √ó S·ªë tu·∫ßn gi·∫£ng d·∫°y ho·∫∑c d·∫°y tr·∫ª) 
    / 
    (ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc √ó 52 tu·∫ßn)
    
    b) ƒê·ªëi v·ªõi nh√† gi√°o trong c∆° s·ªü gi√°o d·ª•c ƒë·∫°i h·ªçc:
    
    Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y = 
    (T·ªïng ti·ªÅn l∆∞∆°ng c·ªßa 12 th√°ng √ó ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc t√≠nh theo gi·ªù h√†nh ch√≠nh √ó 44 tu·∫ßn) 
    / 
    (ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc √ó 1760 gi·ªù √ó 52 tu·∫ßn)
    
    3. ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc:
    
    a) ƒê·ªãnh m·ª©c gi·ªù d·∫°y/nƒÉm h·ªçc ƒë·ªëi v·ªõi gi√°o vi√™n m·∫ßm non = 200 ti·∫øt
    
    b) ƒê·ªãnh m·ª©c ti·∫øt d·∫°y/nƒÉm h·ªçc c·ªßa gi√°o vi√™n m·∫ßm non = 
    (S·ªë gi·ªù d·∫°y ƒë·ªãnh m·ª©c/ng√†y) √ó (S·ªë ng√†y l√†m vi·ªác/tu·∫ßn) √ó (S·ªë tu·∫ßn d·∫°y tr·∫ª/nƒÉm h·ªçc)
    
    4. Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y th√™m = Ti·ªÅn l∆∞∆°ng 01 ti·∫øt d·∫°y √ó 150%
    
    5. Ti·ªÅn l∆∞∆°ng d·∫°y th√™m gi·ªù/nƒÉm = S·ªë ti·∫øt √ó Ti·ªÅn l∆∞∆°ng 01 ti·∫øt
    
    6. [Ph·ª• c·∫•p tr√°ch nhi·ªám] - (M·ª©c l∆∞∆°ng c∆° b·∫£n √ó 25%)
    
    7. T·ªïng s·ªë ti·∫øt d·∫°y th√™m trong m·ªôt nƒÉm h·ªçc kh√¥ng qu√° 200 ti·∫øt
    
    8. Th·ªùi gian c√¥ng t√°c t·ªëi thi·ªÉu = 5 nƒÉm
    """
    
    print("üß™ TESTING IMPROVED PATTERNS")
    print("=" * 60)
    
    patterns = EnhancedRegexPatterns()
    found_formulas = []
    
    # Test t·ª´ng pattern
    for i, pattern_info in enumerate(patterns.get_patterns()[:8], 1):  # Test 8 patterns ƒë·∫ßu
        pattern = pattern_info['pattern']
        
        try:
            # S·ª≠ d·ª•ng re.DOTALL ƒë·ªÉ b·∫Øt multi-line
            matches = re.finditer(pattern, test_content, re.IGNORECASE | re.MULTILINE | re.DOTALL)
            
            for match in matches:
                match_text = match.group(0).strip()
                
                if not patterns.is_excluded(match_text) and len(match_text) > 10:
                    confidence = pattern_info['confidence'] + patterns.calculate_confidence_boost(match_text)
                    
                    found_formulas.append({
                        'pattern_id': i,
                        'name': pattern_info['name'],
                        'formula': match_text,
                        'type': pattern_info['type'],
                        'confidence': min(1.0, confidence),
                        'groups': match.groups()
                    })
                    
        except re.error as e:
            print(f"‚ùå Pattern {i} error: {e}")
    
    # Deduplicate
    unique_formulas = []
    seen = set()
    
    for formula in found_formulas:
        key = formula['formula'][:50].lower().strip()
        if key not in seen:
            seen.add(key)
            unique_formulas.append(formula)
    
    # Sort by confidence
    unique_formulas.sort(key=lambda x: x['confidence'], reverse=True)
    
    print(f"üìä RESULTS: Found {len(unique_formulas)} unique formulas")
    print()
    
    for i, formula in enumerate(unique_formulas, 1):
        print(f"{i:2d}. [{formula['confidence']:.2f}] Pattern #{formula['pattern_id']} - {formula['name']}")
        print(f"    üè∑Ô∏è  Type: {formula['type']}")
        print(f"    üìù Formula: {formula['formula'][:100]}...")
        if formula['groups']:
            print(f"    üîç Groups: {formula['groups']}")
        print()
    
    # Ph√¢n t√≠ch theo type
    type_counts = {}
    for formula in unique_formulas:
        t = formula['type']
        type_counts[t] = type_counts.get(t, 0) + 1
    
    print("üìà FORMULA TYPES:")
    for t, count in sorted(type_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"   {t}: {count}")
    
    # Ki·ªÉm tra 4 patterns m·ªõi
    new_pattern_types = ['multi_line_formula', 'bracket_formula', 'compact_formula', 'unicode_math_formula']
    new_found = [f for f in unique_formulas if f['type'] in new_pattern_types]
    
    print(f"\nüÜï NEW PATTERNS PERFORMANCE:")
    print(f"   Found by new patterns: {len(new_found)}/{len(unique_formulas)}")
    
    for formula in new_found:
        print(f"   ‚úÖ {formula['type']}: {formula['formula'][:60]}...")
    
    return len(unique_formulas), len(new_found)

if __name__ == "__main__":
    total, new_count = test_improved_patterns()
    print(f"\nüéØ SUMMARY: {total} total formulas, {new_count} from new patterns")